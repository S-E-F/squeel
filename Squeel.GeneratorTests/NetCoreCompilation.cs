using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.DependencyModel;

namespace Squeel.GeneratorTests;

public static class NetCoreCompilation
{
    // https://github.com/dotnet/core/issues/2082#issuecomment-442713181
    private static readonly IEnumerable<MetadataReference> _netCoreRefs = DependencyContext.Default!.CompileLibraries
        .SelectMany(cl => cl.ResolveReferencePaths())
        .Select(asm => MetadataReference.CreateFromFile(asm))
        .Distinct()
        .ToArray();

    public static CSharpCompilation Create(
        ImmutableArray<SyntaxTree> syntaxTrees,
        IEnumerable<MetadataReference>? additionalReferences = null,
        [CallerMemberName] string assemblyName = "")
    {
        return CSharpCompilation.Create(
            assemblyName: assemblyName,
            references: additionalReferences is null ? _netCoreRefs : _netCoreRefs.Concat(additionalReferences),
            syntaxTrees: syntaxTrees.Append(_implicitUsings),
            options: new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }

    private static readonly SyntaxTree _implicitUsings = CSharpSyntaxTree.ParseText($"""
        // <auto-generated />
        global using System;
        global using System.Collections.Generic;
        global using System.IO;
        global using System.Linq;
        global using System.Threading;
        global using System.Threading.Tasks;
        """, path: "implicit-usings.g.cs");
}